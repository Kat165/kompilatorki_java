lexer grammar KotlinLexer;
PLUS:'+';
MINUS:'-';
MULTIPLY:'*';
DIVIDE:'/';
PROCENT:'%';
INCREMENT:'++';
DECREMENT:'–';
AND:'&&';
OR:'||';
NOT:'!';
ASSIGN:'=';
ASSIGN_ADD:'+=';
ASSIGN_MINUS:'-=';
ASSIGN_MULTIPLY:'*=';
ASSIGN_DIVIDE:'/=';
ASSIGN_PERCENT:'%=';
EQUALS:'==';
NOT_EQUALS:'!=';
SMALLER:'<';
BIGGER:'>';
SMALLER_OR_EQUAL:'⇐';
BIGGER_OR_EQUAL:'>=';
LEFT_INDEX:'[';
RIGHT_INDEX:']';
LEFT_BRACKET:'(';
RIGHT_BRACKET:')';
LEFT_CURVY_BRACKET:'{';
RIGHT_CURVY_BRACKET:'}';
DELI:',';
DOT:'.';
NL: '\n' | '\r' '\n'?;
PACKAGE:'package';
IMPORT:'import';
CLASS:'class';
FUN:'fun';
OBJECT:'object';
VAL_INIT:'val';
VAR_INIT:'var';
CONSTRUCTOR:'constructor';
BY:'by';
THIS:'this';
WHERE:'where';
IF_INIT:'if';
ELSE_INIT:'else';
WHEN:'when';
TRY_INIT:'try';
CATCH_INIT:'catch';
FOR_INIT:'for';
DO_INIT:'do';
WHILE_INIT:'while';
THROW_INIT:'throw';
RETURN_INIT:'return';
CONT_INIT:'continue';
BREAK_INIT:'break';
AS:'as';
IS:'is';
IN:'in';
NOT_IS:'!is';
NOT_IN:'!in';
OUT:'out';
DYNAMIC:'dynamic';
PUBLIC:'public';
PRIVATE:'private';
PROTECTED:'protected';
INTERNAL:'internal';
ENUM:'enum';
OVERRIDE:'override';
OPEN:'open';
LATEINIT:'lateinit';
IT:'it';
NULL:'null';
TRUE: 'true';
FALSE: 'false';
SPACE: ' ';
COMM: '„';
COM: '`';
Liczba_zmiennopoz: Liczba_zmiennoprzecin | Cyfry;
Liczba_calk: Cyfra_niezer Cyfry | Cyfra;
EscapedIdentifier: '\\' ('t' | 'b' | 'r' | 'n' | '\'' | '”' | '\\' | '$');
Nazwa: Litera (Litera | Cyfra)*;

Char: COM (Litera | Cyfra | EscapedIdentifier) COM ;
String: COMM (Litery | Cyfry | SPACE) COMM ;
Liczba_zmiennoprzecin: Cyfry? DOT Cyfry | Cyfry;

fragment Cyfra: [0-9];
fragment Litera: [a-zA-Z];
fragment Litery: Litera* ;
fragment Cyfra_niezer: [1-9];
fragment Cyfry: Cyfra*;
fragment Initial: VAR_INIT | VAL_INIT;